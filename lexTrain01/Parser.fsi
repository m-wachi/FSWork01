// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | DIM
  | ID of (string * System.Int32)
  | INT of (System.Int32)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DIM
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_exps
    | NONTERM_exp
    | NONTERM_end
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( Ast.Prog ) 
